__author__ = 'root'

import sqlite3
import os
import pymongo
from collections import Counter
import pydeep

class DbSearch():
    '''
    get data from urlmd5.db
    '''
    def __init__(self):
        self.cx = sqlite3.connect('urlmd5.db')
        self.cu = self.cx.cursor()

    def find_by_url(self,url):
        try:
            select_cmd = 'SELECT md5 FROM urlmd5 WHERE url=="%s"'%url
            self.cu.execute(select_cmd)
            result = self.cu.fetchall()
        except Exception,e:
            print e
        ret_list = [url[0] for url in result]
        return ret_list

class PraseResult():
    def __init__(self, md5_list):
        db = pymongo.MongoClient(host="192.168.99.215", port=27017)
        self.db_handler = db.cuckooinf.analysis
        self.md5_list = md5_list

    def get_result(self, md5list):
        json_list = self.db_handler.find({'target.file.md5':{'$in':md5_list}})
        return json_list

    def get_item(self, sample, kee=None, *keys):
        try:
            rets = sample
            for key in keys:
                rets = rets[key]
            if kee!=None:
                rets = [d[kee] for d in rets]
            return rets
        except Exception,e:
            print Exception,e
            return None


    def ssdeeprate(self):
        json_list = self.get_result(self.md5_list)
        sdeep_list = []
        for sample in json_list:
            key_list = ['target', 'file', 'ssdeep']; kee=None
            result = self.get_item(sample, kee, *key_list)
            sdeep_list.append(result)
            print result
        i = 0
        for x in sdeep_list[i:]:
            for y in sdeep_list[i+1:]:
                print pydeep.compare(x,y), x,' || ',y
            i += 1

    def count(self, json_list, key_list, kee):
        counter = Counter()
        for sample in json_list:
            result = self.get_item(sample, kee, *key_list)
            if not isinstance(result, list):
                result = [result]
            try:
                counter.update(result)
            except Exception,e:
                print Exception,e
        #print counter.items()
        return counter

    def report(self, ct, title):
        buf = '### '+ title + '\n'
        res = sorted(ct.items(), key=lambda f:f[1], reverse=True)
        for item in res:
            buf += '* '+str(item)+'\n'
        return buf

    def parse_head(self, json_list, fp):
        fp.write('<pre>\n')
        fp.write('total: %d\n'%len(json_list))
        for sample in json_list:
            key_list = ['target', 'file', 'md5']; kee=None
            md5 = self.get_item(sample, kee, *key_list)
            key_list = ['virustotal', 'positives']; kee=None
            posi = self.get_item(sample, kee, *key_list)
            buf = str(md5) +'\t'+str(posi)+'\n'
            fp.write(buf)
        fp.write('</pre>\n')

    def parse_result(self, key_dict):
        json_list = self.get_result(self.md5_list)
        sample_list = []
        for data in json_list:
            sample_list.append(data)
        fp = open('/root/myreport.md', 'w')

        fp.write('# Malware Compare Report\n')
        self.parse_head(sample_list, fp)
        for data in key_dict:
            ct = self.count(sample_list, data['key_list'], data['kee'])
            buf = self.report(ct, data['title'])
            fp.write(buf)
        fp.close()


    def tests(self):
        pass

def find_file(md5_list):
    '''
    copy file form /mnt/data to /root/tmp
    :param md5_list: filename list
    :return:null
    '''
    file_path = '/mnt/data'
    os.system("rm /root/tmp/*")
    for md5 in md5_list:
        print md5
        filename = os.path.join(file_path,md5)
        cmd = "cp %s /root/tmp/"%filename
        os.system(cmd)

if __name__ == '__main__':
    dbsearch = DbSearch()
    #url = 'baidu.com'
    #md5_list = dbsearch.find_by_url(url)

    key_dict = [{'key_list':['virustotal', 'scans', 'McAfee', 'result'], 'kee':None, 'title':'McAfee'},\
                    {'key_list':['network', 'domains'], 'kee':'domain', 'title':'Domain'},\
                {'key_list':['network', 'http'],'kee':'uri','title':'Uri'},\
                {'key_list':['behavior', 'summary', 'command_line'],'kee':None,'title':'Cmd'},\
                {'key_list':['signatures'], 'kee':'description', 'title':'Signature'},\
                {'key_list':['behavior', 'summary', 'file_created'], 'kee':None, 'title':'File_created'},\
                {'key_list':['behavior', 'summary', 'regkey_written'], 'kee':None, 'title':'Reg_write'},\
                {'key_list':['behavior', 'summary', 'wmi_query'], 'kee':None, 'title':'Wmi_query'},\
                {'key_list':['behavior', 'summary', 'directory_enumerated'], 'kee':None, 'title':'Directory_enumerated'},\
                {'key_list':['behavior', 'summary', 'file_deleted'], 'kee':None, 'title':'File_deleted'}

    ]
    md5_list = [u'6b446db3949e46bd72774b28cf258287', u'2faba1514a830a7b69acd0b7faed33e2', u'9ffced7a445a7417994040cc071ece83', u'5c87fb7c80335b6e21b8f47d7a6f3709', u'0beb86a027950cbacf7bc41e2c03fd34', u'ed67681da5338620c30ed2a38c5f4746', u'ee712781d9badcb958a9b745214a196b']

    pres = PraseResult(md5_list)
    pres.parse_result(key_dict)
    find_file(md5_list)