__author__ = 'root'

import pymongo
import sqlite3

class BuildDb():
    '''
    connect to local database urlmd5.db
    '''
    def __init__(self):
        self.cx = sqlite3.connect('urlmd5.db')
        self.cu = self.cx.cursor()
        self.dbInit()

    def dbInit(self):
        #create table
        try:
            createdb_cmd = "CREATE TABLE IF NOT EXISTS urlmd5 (url TEXT , md5 TEXT)"
            self.cu.execute(createdb_cmd)
            self.cx.commit()
        except Exception,e:
            print e

    def insert(self, data):
        '''insert data to table
        :param data: (url, md5)
        :return: null
        '''
        try:
            insert_cmd = 'INSERT INTO urlmd5(url, md5) VALUES ("%s", "%s")'%data
            print insert_cmd
            self.cu.execute(insert_cmd)
            self.cx.commit()
        except Exception,e:
            print e

class FindUrl():
    '''
    connect to remote database
    '''
    def __init__(self):
        db = pymongo.MongoClient(host='192.168.99.215', port=27017)
        self.db_handler = db.cuckooinf.analysis
        self.md5_url = []

    def find_url(self):
        '''find url and md5 from malware database
        :return:
        '''
        json_list = self.db_handler.find({'network.domains':{'$exists':True}}, {'_id':0, 'network.domains':1, 'target.file.md5':1})
        for data in json_list:
            md5 = data['target']['file']['md5']
            domain_list = data['network']['domains']
            for domain in domain_list:
                self.md5_url.append((domain['domain'],md5))

    def print_md5url(self):
        for x in self.md5_url:
            print x

    def buildDb(self):
        '''build database for url-md5
        :return:
        '''
        self.find_url()
        bdb = BuildDb()
        for data in self.md5_url:
            bdb.insert(data)

if __name__ == '__main__':
    findurl = FindUrl()
    findurl.buildDb()