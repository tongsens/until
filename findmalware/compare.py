__author__ = 'root'
import pymongo
from collections import Counter

class CompareMal():
    def __init__(self, sample):
        self.sample = sample

    def getPid(self):
        cmdstr = 'C:\Documents and Settings\Administrator\Local Settings\Temp'
        for x in self.sample['behavior']['processes']:
            pid = x['pid']
            if cmdstr in x['command_line']:
                return pid

    def getApi(self):
        try:
            pid = self.getPid()
            api_dict = self.sample['behavior']['apistats'][str(pid)]
            return api_dict.keys()
        except Exception,e:
            print e
        return []

    def getmd5(self):
        try:
            md5 = self.sample['target']['file']['md5']
            return md5
        except Exception,e:
            print e
            return None

    def makeIdx(self, api_list):
        apis = self.getApi()
        idxstr = ''
        for api in api_list:
            if api in apis:
                idxstr += '1'
            else:
                idxstr += '0'
        return idxstr
        #return int(idxstr, 2)


def cmp_idx(idx1, idx2):
    uni = idx1|idx2
    xor = idx1^idx2
    uc = Counter(bin(uni)[2:])
    xc = Counter(bin(xor)[2:])
    print xc['1']
    print uc['1']
    print float(1) - float(xc['1'])/float(uc['1'])

def test(md5):
    db = pymongo.MongoClient(host='192.168.99.215', port=27017)
    db_handler = db.cuckooinf.analysis
    #json_list = db_handler.find({'target.file.md5':{'$in':md5}})
    json_list = db_handler.find()
    api_list = getApiList()
    md5_idx = []
    for sample in json_list:
        comp = CompareMal(sample)
        md5 = comp.getmd5()
        idx = comp.makeIdx(api_list)
        md5_idx.append((md5, idx))
    buildmd5db(md5_idx)

'''
def builddb(data_list):
    import sqlite3
    cx = sqlite3.connect('api.db')
    cu = cx.cursor()
    create_cmd = "CREATE TABLE api (api TEXT)"
    cu.execute(create_cmd)
    cx.commit()
    for api in data_list:
        insert_cmd = 'INSERT INTO api(api) VALUES ("%s")'%api
        cu.execute(insert_cmd)
    cx.commit()
'''

def buildmd5db(data_list):
    import sqlite3
    cx = sqlite3.connect('md5idx.db')
    cu = cx.cursor()
    create_cmd = 'CREATE TABLE md5s (md5 TEXT, idx TEXT )'
    cu.execute(create_cmd)
    cx.commit()
    for data in data_list:
        insert_cmd = 'INSERT INTO md5s (md5, idx) VALUES ("%s", "%s")'%data
        cu.execute(insert_cmd)
    cx.commit()

def getApiList():
    import sqlite3
    cx = sqlite3.connect('api.db')
    cu = cx.cursor()
    select_cmd = 'SELECT * FROM api'
    cu.execute(select_cmd)
    res = cu.fetchall()
    cu.close()
    cx.close()
    return [d[0] for d in res]


if __name__ == '__main__':
    md5 = ['96d4f360778e914c721ebf00ea899faf', 'a370c1b4c3eac21dd86e5041e558dc4e']
    test(md5)
